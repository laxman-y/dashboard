import {
  require_react
} from "./chunk-5ULDFCBR.js";
import {
  __toESM
} from "./chunk-5WRI5ZAA.js";

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/use-collection.js
var import_react2 = __toESM(require_react(), 1);

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/operations/filter.js
function defaultFilteringFunction(item, filteringText, filteringFields) {
  if (filteringText.length === 0) {
    return true;
  }
  filteringFields = filteringFields || Object.keys(item);
  var lowFilteringText = filteringText.toLowerCase();
  return filteringFields.some(function(key) {
    return String(item[key]).toLowerCase().indexOf(lowFilteringText) > -1;
  });
}
function createFilterPredicate(filtering, filteringText) {
  var _a;
  if (filteringText === void 0) {
    filteringText = "";
  }
  if (!filtering) {
    return null;
  }
  var filteringFunction = (_a = filtering.filteringFunction) !== null && _a !== void 0 ? _a : defaultFilteringFunction;
  return function(item) {
    return filteringFunction(item, filteringText, filtering.fields);
  };
}

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/date-utils/parse-iso-date.js
function parseIsoDate(isoDate) {
  if (typeof isoDate === "string") {
    if (isoDate.includes("T")) {
      return new Date(isoDate);
    } else {
      return /* @__PURE__ */ new Date(isoDate + "T00:00:00");
    }
  }
  return /* @__PURE__ */ new Date(NaN);
}

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/date-utils/compare-dates.js
function compareDates(date, dateToCompare) {
  if (date instanceof Date && typeof dateToCompare === "string") {
    return startOfDay(date).getTime() - startOfDay(parseIsoDate(dateToCompare)).getTime();
  }
  return NaN;
}
function compareTimestamps(date, dateToCompare) {
  if (date instanceof Date && typeof dateToCompare === "string") {
    return date.getTime() - parseIsoDate(dateToCompare).getTime();
  }
  return NaN;
}
function startOfDay(date) {
  var copy = new Date(date.getTime());
  copy.setHours(0, 0, 0, 0);
  return copy;
}

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/operations/property-filter.js
var filterUsingOperator = function(itemValue, tokenValue, _a) {
  var operator = _a.operator, match = _a.match;
  if (match === "date" || match === "datetime") {
    var comparator = match === "date" ? compareDates : compareTimestamps;
    var comparisonResult = comparator(itemValue, tokenValue);
    switch (operator) {
      case "<":
        return comparisonResult < 0;
      case "<=":
        return comparisonResult <= 0;
      case ">":
        return comparisonResult > 0;
      case ">=":
        return comparisonResult >= 0;
      case "=":
        return comparisonResult === 0;
      case "!=":
        return comparisonResult !== 0;
      default:
        return false;
    }
  } else if (typeof match === "function") {
    return match(itemValue, tokenValue);
  } else if (match) {
    throw new Error("Unsupported `operator.match` type given.");
  }
  switch (operator) {
    case "<":
      return itemValue < tokenValue;
    case "<=":
      return itemValue <= tokenValue;
    case ">":
      return itemValue > tokenValue;
    case ">=":
      return itemValue >= tokenValue;
    case "=":
      return itemValue == tokenValue;
    case "!=":
      return itemValue != tokenValue;
    case ":":
      return (itemValue + "").toLowerCase().indexOf((tokenValue + "").toLowerCase()) > -1;
    case "!:":
      return (itemValue + "").toLowerCase().indexOf((tokenValue + "").toLowerCase()) === -1;
    case "^":
      return (itemValue + "").toLowerCase().startsWith((tokenValue + "").toLowerCase());
    default:
      throw new Error("Unsupported operator given.");
  }
};
function freeTextFilter(value, item, operator, filteringPropertiesMap) {
  var matches = Object.keys(filteringPropertiesMap).some(function(propertyKey) {
    var operators = filteringPropertiesMap[propertyKey].operators;
    return !!operators[operator] && filterUsingOperator(item[propertyKey], value, { operator: ":" });
  });
  return operator === ":" ? matches : !matches;
}
function filterByToken(token, item, filteringPropertiesMap) {
  if (token.propertyKey) {
    if (!(token.propertyKey in filteringPropertiesMap) || !(token.operator in filteringPropertiesMap[token.propertyKey].operators)) {
      return false;
    }
    var operator = filteringPropertiesMap[token.propertyKey].operators[token.operator];
    var itemValue = (operator === null || operator === void 0 ? void 0 : operator.match) ? item[token.propertyKey] : fixupFalsyValues(item[token.propertyKey]);
    return filterUsingOperator(itemValue, token.value, operator !== null && operator !== void 0 ? operator : { operator: token.operator });
  }
  return freeTextFilter(token.value, item, token.operator, filteringPropertiesMap);
}
function defaultFilteringFunction2(filteringPropertiesMap) {
  return function(item, _a) {
    var tokens = _a.tokens, operation = _a.operation;
    var result = operation === "and" ? true : !tokens.length;
    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
      var token = tokens_1[_i];
      result = operation === "and" ? result && filterByToken(token, item, filteringPropertiesMap) : result || filterByToken(token, item, filteringPropertiesMap);
    }
    return result;
  };
}
function createPropertyFilterPredicate(propertyFiltering, query) {
  if (query === void 0) {
    query = { tokens: [], operation: "and" };
  }
  if (!propertyFiltering) {
    return null;
  }
  var filteringPropertiesMap = propertyFiltering.filteringProperties.reduce(function(acc, _a) {
    var _b;
    var key = _a.key, operators = _a.operators, defaultOperator = _a.defaultOperator;
    var operatorMap = (_b = {}, _b[defaultOperator !== null && defaultOperator !== void 0 ? defaultOperator : "="] = { operator: defaultOperator !== null && defaultOperator !== void 0 ? defaultOperator : "=" }, _b);
    operators === null || operators === void 0 ? void 0 : operators.forEach(function(op) {
      if (typeof op === "string") {
        operatorMap[op] = { operator: op };
      } else {
        operatorMap[op.operator] = { operator: op.operator, match: op.match };
      }
    });
    acc[key] = {
      operators: operatorMap
    };
    return acc;
  }, {});
  var filteringFunction = propertyFiltering.filteringFunction || defaultFilteringFunction2(filteringPropertiesMap);
  return function(item) {
    return filteringFunction(item, query);
  };
}
var fixupFalsyValues = function(value) {
  if (typeof value === "boolean") {
    return value + "";
  }
  if (value || value === 0) {
    return value;
  }
  return "";
};

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/operations/sort.js
function getSorter(sortingField) {
  if (!sortingField) {
    return null;
  }
  return function(row1, row2) {
    var _a, _b;
    var value1 = (_a = row1[sortingField]) !== null && _a !== void 0 ? _a : "";
    var value2 = (_b = row2[sortingField]) !== null && _b !== void 0 ? _b : "";
    if (typeof value1 === "string" && typeof value2 === "string") {
      return value1.localeCompare(value2);
    }
    return value1 < value2 ? -1 : value1 == value2 ? 0 : 1;
  };
}
function createComparator(sorting, state) {
  var _a;
  if (!sorting || !state) {
    return null;
  }
  var direction = state.isDescending ? -1 : 1;
  var comparator = (_a = state.sortingColumn.sortingComparator) !== null && _a !== void 0 ? _a : getSorter(state.sortingColumn.sortingField);
  return comparator ? function(a, b) {
    return comparator(a, b) * direction;
  } : null;
}

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/operations/pagination.js
var DEFAULT_PAGE_SIZE = 10;
function createPageProps(pagination, currentPageIndex, items) {
  var _a;
  if (!pagination) {
    return null;
  }
  var pageSize = (_a = pagination.pageSize) !== null && _a !== void 0 ? _a : DEFAULT_PAGE_SIZE;
  var pagesCount = Math.ceil(items.length / pageSize);
  var pageIndex = currentPageIndex !== null && currentPageIndex !== void 0 ? currentPageIndex : 1;
  if (pageIndex < 1 || pageIndex > pagesCount || Number.isNaN(pageIndex)) {
    pageIndex = 1;
  }
  return { pageSize, pagesCount, pageIndex };
}

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/operations/compose-filters.js
function composeFilters() {
  var predicates = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    predicates[_i] = arguments[_i];
  }
  return predicates.some(Boolean) ? function(item) {
    for (var _i2 = 0, predicates_1 = predicates; _i2 < predicates_1.length; _i2++) {
      var predicate = predicates_1[_i2];
      if (predicate && !predicate(item)) {
        return false;
      }
    }
    return true;
  } : null;
}

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/operations/index.js
function processItems(items, _a, _b) {
  var filteringText = _a.filteringText, sortingState = _a.sortingState, currentPageIndex = _a.currentPageIndex, propertyFilteringQuery = _a.propertyFilteringQuery;
  var filtering = _b.filtering, sorting = _b.sorting, pagination = _b.pagination, propertyFiltering = _b.propertyFiltering;
  var filterPredicate = composeFilters(createPropertyFilterPredicate(propertyFiltering, propertyFilteringQuery), createFilterPredicate(filtering, filteringText));
  if (filterPredicate) {
    items = items.filter(filterPredicate);
  }
  var filteredItemsCount = filterPredicate ? items.length : void 0;
  var comparator = createComparator(sorting, sortingState);
  if (comparator) {
    items = items.slice().sort(comparator);
  }
  var allPageItems = items;
  var pageProps = createPageProps(pagination, currentPageIndex, items);
  if (pageProps) {
    items = items.slice((pageProps.pageIndex - 1) * pageProps.pageSize, pageProps.pageIndex * pageProps.pageSize);
  }
  return {
    items,
    allPageItems,
    filteredItemsCount,
    pagesCount: pageProps === null || pageProps === void 0 ? void 0 : pageProps.pagesCount,
    actualPageIndex: pageProps === null || pageProps === void 0 ? void 0 : pageProps.pageIndex
  };
}
var getTrackableValue = function(trackBy, item) {
  if (!trackBy) {
    return item;
  }
  if (typeof trackBy === "function") {
    return trackBy(item);
  }
  return item[trackBy];
};
var processSelectedItems = function(items, selectedItems, trackBy) {
  var selectedSet = /* @__PURE__ */ new Set();
  selectedItems.forEach(function(item) {
    return selectedSet.add(getTrackableValue(trackBy, item));
  });
  return items.filter(function(item) {
    return selectedSet.has(getTrackableValue(trackBy, item));
  });
};
var itemsAreEqual = function(items1, items2, trackBy) {
  if (items1.length !== items2.length) {
    return false;
  }
  var set1 = /* @__PURE__ */ new Set();
  items1.forEach(function(item) {
    return set1.add(getTrackableValue(trackBy, item));
  });
  return items2.every(function(item) {
    return set1.has(getTrackableValue(trackBy, item));
  });
};

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/utils.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function collectionReducer(state, action) {
  var newState = __assign({}, state);
  switch (action.type) {
    case "selection":
      newState.selectedItems = action.selectedItems;
      break;
    case "filtering":
      newState.currentPageIndex = 1;
      newState.filteringText = action.filteringText;
      break;
    case "sorting":
      newState.currentPageIndex = 1;
      newState.sortingState = action.sortingState;
      break;
    case "pagination":
      newState.currentPageIndex = action.pageIndex;
      break;
    case "property-filtering":
      newState.currentPageIndex = 1;
      newState.propertyFilteringQuery = action.query;
      break;
  }
  return newState;
}
function createActions(_a) {
  var dispatch = _a.dispatch, collectionRef = _a.collectionRef;
  return {
    setFiltering: function(filteringText) {
      dispatch({ type: "filtering", filteringText });
      collectionRef.current && collectionRef.current.scrollToTop();
    },
    setSorting: function(state) {
      dispatch({ type: "sorting", sortingState: state });
      collectionRef.current && collectionRef.current.scrollToTop();
    },
    setCurrentPage: function(pageIndex) {
      dispatch({ type: "pagination", pageIndex });
      collectionRef.current && collectionRef.current.scrollToTop();
    },
    setSelectedItems: function(selectedItems) {
      dispatch({ type: "selection", selectedItems });
    },
    setPropertyFiltering: function(query) {
      dispatch({ type: "property-filtering", query });
      collectionRef.current && collectionRef.current.scrollToTop();
    }
  };
}
function createSyncProps(options, _a, actions, collectionRef, _b) {
  var _c, _d;
  var filteringText = _a.filteringText, sortingState = _a.sortingState, selectedItems = _a.selectedItems, currentPageIndex = _a.currentPageIndex, propertyFilteringQuery = _a.propertyFilteringQuery;
  var pagesCount = _b.pagesCount, actualPageIndex = _b.actualPageIndex, allItems = _b.allItems, allPageItems = _b.allPageItems;
  var empty = options.filtering ? allItems.length ? options.filtering.noMatch : options.filtering.empty : null;
  empty = options.propertyFiltering ? allItems.length ? options.propertyFiltering.noMatch : options.propertyFiltering.empty : empty;
  var filteringOptions = options.propertyFiltering ? options.propertyFiltering.filteringProperties.reduce(function(acc, property) {
    Object.keys(allItems.reduce(function(acc2, item) {
      acc2["" + fixupFalsyValues(item[property.key])] = true;
      return acc2;
    }, {})).forEach(function(value) {
      if (value !== "") {
        acc.push({
          propertyKey: property.key,
          value
        });
      }
    });
    return acc;
  }, []) : [];
  return {
    collectionProps: __assign(__assign(__assign(__assign({ empty }, options.sorting ? {
      onSortingChange: function(_a2) {
        var detail = _a2.detail;
        actions.setSorting(detail);
      },
      sortingColumn: sortingState === null || sortingState === void 0 ? void 0 : sortingState.sortingColumn,
      sortingDescending: sortingState === null || sortingState === void 0 ? void 0 : sortingState.isDescending
    } : {}), options.selection ? {
      onSelectionChange: function(_a2) {
        var selectedItems2 = _a2.detail.selectedItems;
        actions.setSelectedItems(selectedItems2);
      },
      selectedItems,
      trackBy: options.selection.trackBy
    } : {}), { ref: collectionRef }), ((_c = options.pagination) === null || _c === void 0 ? void 0 : _c.pageSize) ? {
      totalItemsCount: allPageItems.length,
      firstIndex: ((actualPageIndex !== null && actualPageIndex !== void 0 ? actualPageIndex : currentPageIndex) - 1) * options.pagination.pageSize + 1
    } : {}),
    filterProps: {
      filteringText,
      onChange: function(_a2) {
        var filteringText2 = _a2.detail.filteringText;
        actions.setFiltering(filteringText2);
      }
    },
    propertyFilterProps: {
      query: propertyFilteringQuery,
      onChange: function(_a2) {
        var query = _a2.detail;
        actions.setPropertyFiltering(query);
      },
      filteringProperties: ((_d = options.propertyFiltering) === null || _d === void 0 ? void 0 : _d.filteringProperties) || [],
      filteringOptions
    },
    paginationProps: {
      currentPageIndex: actualPageIndex !== null && actualPageIndex !== void 0 ? actualPageIndex : currentPageIndex,
      // pagesCount is always calculated when options.pagination is present
      pagesCount,
      onChange: function(_a2) {
        var currentPageIndex2 = _a2.detail.currentPageIndex;
        actions.setCurrentPage(currentPageIndex2);
      }
    }
  };
}

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/use-collection-state.js
var import_react = __toESM(require_react(), 1);
function useCollectionState(options, collectionRef) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j;
  var _k = (0, import_react.useReducer)(collectionReducer, {
    selectedItems: (_b = (_a = options.selection) === null || _a === void 0 ? void 0 : _a.defaultSelectedItems) !== null && _b !== void 0 ? _b : [],
    sortingState: (_c = options.sorting) === null || _c === void 0 ? void 0 : _c.defaultState,
    currentPageIndex: (_e = (_d = options.pagination) === null || _d === void 0 ? void 0 : _d.defaultPage) !== null && _e !== void 0 ? _e : 1,
    filteringText: (_g = (_f = options.filtering) === null || _f === void 0 ? void 0 : _f.defaultFilteringText) !== null && _g !== void 0 ? _g : "",
    propertyFilteringQuery: (_j = (_h = options.propertyFiltering) === null || _h === void 0 ? void 0 : _h.defaultQuery) !== null && _j !== void 0 ? _j : { tokens: [], operation: "and" }
  }), state = _k[0], dispatch = _k[1];
  return [
    state,
    createActions({
      dispatch,
      collectionRef
    })
  ];
}

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/use-collection.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
function useCollection(allItems, options) {
  var collectionRef = (0, import_react2.useRef)(null);
  var _a = useCollectionState(options, collectionRef), state = _a[0], actions = _a[1];
  var _b = processItems(allItems, state, options), items = _b.items, allPageItems = _b.allPageItems, pagesCount = _b.pagesCount, filteredItemsCount = _b.filteredItemsCount, actualPageIndex = _b.actualPageIndex;
  if (options.selection && !options.selection.keepSelection) {
    var newSelectedItems = processSelectedItems(items, state.selectedItems, options.selection.trackBy);
    if (!itemsAreEqual(newSelectedItems, state.selectedItems, options.selection.trackBy)) {
      actions.setSelectedItems(newSelectedItems);
    }
  }
  return __assign2({ items, allPageItems, filteredItemsCount, actions }, createSyncProps(options, state, actions, collectionRef, {
    actualPageIndex,
    pagesCount,
    allItems,
    allPageItems
  }));
}

export {
  useCollection
};
//# sourceMappingURL=chunk-COYT6KLK.js.map
