// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { reportRuntimeApiWarning } from '../helpers/metrics';
const storageKeyMessageHandler = Symbol.for('awsui-widget-api-message-handler');
const storageKeyInitialMessages = Symbol.for('awsui-widget-api-initial-messages');
function getWindow() {
    return window;
}
function getAppLayoutMessageHandler() {
    const win = getWindow();
    return win[storageKeyMessageHandler];
}
export function getAppLayoutInitialState() {
    return getWindow()[storageKeyInitialMessages];
}
export function registerAppLayoutHandler(handler) {
    const win = getWindow();
    if (win[storageKeyMessageHandler]) {
        reportRuntimeApiWarning('AppLayoutWidget', 'Double registration attempt, the old handler will be overridden');
    }
    win[storageKeyMessageHandler] = handler;
    return () => {
        win[storageKeyMessageHandler] = undefined;
    };
}
export function clearInitialMessages() {
    getWindow()[storageKeyInitialMessages] = undefined;
}
/**
 * Returns whether there is an app layout present on this page or not
 */
export function isAppLayoutReady() {
    return !!getAppLayoutMessageHandler();
}
/**
 * Registers a new runtime drawer to app layout
 * @param drawer
 */
export function registerLeftDrawer(drawer) {
    var _a, _b;
    const win = getWindow();
    const message = { type: 'registerLeftDrawer', payload: drawer };
    win[storageKeyInitialMessages] = (_a = win[storageKeyInitialMessages]) !== null && _a !== void 0 ? _a : [];
    win[storageKeyInitialMessages].push(message);
    (_b = getAppLayoutMessageHandler()) === null || _b === void 0 ? void 0 : _b(message);
}
/**
 * Interact with already registered app layout drawers
 * @param message
 */
export function updateDrawer(message) {
    var _a;
    (_a = getAppLayoutMessageHandler()) === null || _a === void 0 ? void 0 : _a(message);
}
//# sourceMappingURL=internal.js.map